/**
 * This file contains the code and context for a web worker to run a given UserScript.
 * This ensures that the UserScript cannot interfere with the game context.
 * @see http://stackoverflow.com/questions/22506026/how-to-safely-run-user-supplied-javascript-code/22892328
 */

"use strict";

define(["squishy/squishy", "./UserScript"], function(squishy) {
	 /**
	  * Constructs a ScriptContext object which determines how a script is executed.
	  * 
	  * @constructor
	  * @param {Object} game The game object that owns this context.
	  */
	var WorkerScriptContext = function(game) {
		squishy.assert(game, "game is not defined");
		this.game = game;

		// copy config into this context
		//squishy.clone(config, this, false);
	};
	
	 /**
	  * Starts and initializes the worker that executes UserScript objects in parallel, in a separate context.
	  */
	WorkerScriptContext.prototype.startWorker = function() {
	    // the worker initialization code
		// var workerContext = WorkerScriptContext.createWorkerContext();
		// var code = this.buildWorkerCode(workerContext.init, workerContext.globals);
		// //console.log(code);

		// // Obtain a blob URL reference to our virtual worker 'file'.
		// var blob = new Blob([code], {type: 'text/javascript'});
		// var blobURL = window.URL.createObjectURL(blob);
		// this.worker = new Worker(blobURL);
		// this.worker.onmessage = (function(self) { return function (event) {
			// // input generated by UserScript
			// var data = event.data;
			// var cmd = data.command;
			// var args = data.args;
			// var player = self.game.player;
			// switch (cmd) {
				// case "action":
					// // action to be performed by agent
					// player.performAction(args);
					// break;
				// case "error_static":
					// // TODO: Show information in UI
					// break;
				// case "error_runtime":
					// // TODO: Show information in UI
					// break;
			// }
		// };})(this);
		
		var baseUrl;
		if (squishy.getGlobalContext().document) {
			// browser
			baseUrl = document.URL;
		}
		else if (squishy.getGlobalContext().__dirname) {
			// Node
			baseURL = __dirname + "/../..";
		}
		this.worker = new Worker("js/core/ScriptWorkerCode.js");
		this.worker.postMessage({command: "init", args: baseUrl});	// start worker
	};
	
	 /**
	  * Terminates the worker. You will have to call startWorker again to run more scripts.
	  */
	WorkerScriptContext.prototype.terminateWorker = function() {
	    this.worker.terminate();
	}

	 /**
	  * Runs the given script in this context.
	  * 
	  * @param {UserScript} script A script to be executed.
	  */
	WorkerScriptContext.prototype.runScript = function(script) {
		this.worker.postMessage({
			command: "run",
			args: script.codeString
		});
	};
	
	/**
	 * Creates a string from a set of named globals that will be provided to the worker.
	 * The initFunction will be executed anonymously, without arguments.
	 */
	WorkerScriptContext.prototype.buildWorkerCode = function(initFunction, globals) {
		var str = WorkerScriptContext.objToVars(globals);
		str += "(" + initFunction + ")(); ";
		return str;
	};
	
	/**
	 * This is a "deep toString" function. Unlike JSON.stringify, this also works for functions.
	 * It also unwraps the outmost layer.
	 * For example, {a : 'a', x = { y = 2 }} becomes:
	 * 		var a = 'a';
	 *		var x = { 
	 *			y = 2
	 *		};
	 */
	WorkerScriptContext.objToVars = function(obj, layer, indent) {
		// TODO: Consider using proper stringbuilder for better performance
		
		var str = "";
		var isArray = typeof(obj) === "array";
		
		if (!layer) {
			layer = 0;
			squishy.assert(!isArray, "objToVars cannot be called on arrays at the outmost layer. Consider starting with layer = 1.");
		}
		
		// prepare indentation
		if (!indent) {
			indent = "";
			for (var i = 0; i < layer; ++i) {
				indent += "    ";
			}
		}
		else {
			indent += "    ";
		}
		
		if (layer) {
			// wrap object in the right parentheses
			str += (isArray ? "[" : "{") + "\n";
		}
		
		for (var propName in obj) {
			var prop = obj[propName];
			var propStr;
			if (prop.hasAnyProperty()) {
				// prop is an object
				propStr = WorkerScriptContext.objToVars(prop, layer+1, indent);
			}
			else {
				propStr = prop.toString();
			}
			if (!layer) {
				// unwrap outmost layer
				str += indent + "var " + propName + " = " + propStr + ";\n";
			}
			else {
				if (isArray) {
					str += indent + propStr + ",\n";
				}
				else {
					str += indent + propName + " : " + propStr + ",\n";
				}
			}
		}
		
		// remove dangling comma
		if (str.trim().endsWith(",")) {
			str = str.substring(0, str.length-1);
		}
		
		if (layer > 0) {
			str += "\n" + indent;
			str += isArray ? "]" : "}";
		}
		return str;
	};
	
	return WorkerScriptContext;
});